use crate::{reply::{ReplyHandler, test_utils::AssertSender}, trait_legacy::callback::{DirectoryHandler, ReplyDirectory}, FileType};
use std::ffi::OsStr;

#[test]
fn reply_directory() {
    let expected = vec![
        0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde, 0x00, 0x00,
        0x00, 0x00, 0xbb, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x68, 0x65,
        0x6c, 0x6c, 0x6f, 0x00, 0x00, 0x00, 0xdd, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00,
        0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x72, 0x73,
    ];
    let sender = AssertSender { expected };
    let replyhandler: ReplyHandler = ReplyHandler::new(0xdeadbeef, sender);
    let callback = DirectoryHandler::new(4096, replyhandler);
    let mut reply = ReplyDirectory::new(Box::new(callback));
    assert!(!reply.add(
        0xaabb,
        1,
        FileType::Directory,
        OsStr::new("hello")
    ));
    assert!(!reply.add(
        0xccdd,
        2,
        FileType::RegularFile,
        OsStr::new("world.rs")
    ));
    reply.ok();
}